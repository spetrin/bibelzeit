import { useState } from 'react';
import { Edit2, Trash2, StickyNote } from 'lucide-react';
import { Button } from '@/components/ui/button.jsx';
import NotesModal from './NotesModal';

const EventCard = ({ event, side, onEdit, onDelete, color }) => {
  const [isNotesOpen, setIsNotesOpen] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const formatYear = (year) => {
    if (year === 0) return '–ù.–≠.';
    return year < 0 ? `${Math.abs(year)} –¥–æ –Ω.—ç.` : year.toString();
  };

  const getEventPeriod = () => {
    if (!event.is_period) return formatYear(event.year_start);
    return `${formatYear(event.year_start)} - ${formatYear(event.year_end)}`;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const getCardColor = () => {
    if (color) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bg-color-500 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã
      const colorName = color.replace('bg-', '').replace('-500', '');
      return {
        background: event.is_period ? `${colorName}-50` : 'white',
        border: `${colorName}-200`,
        accent: `${colorName}-500`
      };
    }
    
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    return {
      background: event.is_period ? 'amber-50' : 'white',
      border: event.is_period ? 'amber-200' : 'slate-200',
      accent: event.is_period ? 'amber-500' : 'blue-500'
    };
  };

  const cardColors = getCardColor();

  return (
    <>
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è */}
      <div 
        className={`
          relative flex items-center px-3 py-1 rounded-md text-sm
          transition-all duration-200 cursor-pointer group
          ${isHovered ? 'shadow-md scale-105 z-10' : 'shadow-sm'}
          hover:shadow-md hover:scale-105
          max-w-xs
        `}
        style={{
          backgroundColor: color ? `rgb(var(--${cardColors.background}))` : (event.is_period ? '#fefbf3' : 'white'),
          borderColor: color ? `rgb(var(--${cardColors.border}))` : (event.is_period ? '#fed7aa' : '#e2e8f0'),
          borderWidth: '1px',
          borderStyle: 'solid',
          minHeight: '28px' // –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ 14px + padding
        }}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {/* –¶–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
        {color && (
          <div 
            className={`absolute left-0 top-0 bottom-0 w-1 rounded-l-md ${color}`}
          />
        )}
        {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="flex-1 min-w-0">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
          <div className="font-medium text-slate-800 truncate text-sm leading-tight">
            {event.title}
          </div>
          
          {/* –ü–µ—Ä–∏–æ–¥/–≥–æ–¥ */}
          <div className="text-xs text-slate-600 truncate">
            {getEventPeriod()}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
        <div className={`
          flex items-center space-x-1 ml-2 transition-opacity duration-200
          ${isHovered ? 'opacity-100' : 'opacity-0'}
        `}>
          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–º–µ—Ç–æ–∫ */}
          {event.notes && (
            <Button
              variant="ghost"
              size="sm"
              onClick={(e) => {
                e.stopPropagation();
                setIsNotesOpen(true);
              }}
              className="h-5 w-5 p-0 text-blue-600 hover:text-blue-700 hover:bg-blue-100"
            >
              <StickyNote className="h-3 w-3" />
            </Button>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <Button
            variant="ghost"
            size="sm"
            onClick={(e) => {
              e.stopPropagation();
              onEdit(event);
            }}
            className="h-5 w-5 p-0 text-slate-600 hover:text-slate-700 hover:bg-slate-100"
          >
            <Edit2 className="h-3 w-3" />
          </Button>
          
          {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
          <Button
            variant="ghost"
            size="sm"
            onClick={(e) => {
              console.log('üóëÔ∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è, event.id:', event.id);
              e.stopPropagation();
              console.log('üóëÔ∏è –í—ã–∑—ã–≤–∞–µ–º onDelete —Å ID:', event.id);
              onDelete(event.id);
              console.log('üóëÔ∏è onDelete –≤—ã–∑–≤–∞–Ω');
            }}
            className="h-5 w-5 p-0 text-red-600 hover:text-red-700 hover:bg-red-100"
          >
            <Trash2 className="h-3 w-3" />
          </Button>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é */}
        {event.is_period && (
          <div className={`
            absolute ${side === 'left' ? '-right-1' : '-left-1'} top-1/2 transform -translate-y-1/2 
            w-1 h-4 bg-gradient-to-b from-amber-400 to-amber-600 rounded-full opacity-70
          `}></div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫ */}
      <NotesModal
        isOpen={isNotesOpen}
        onClose={() => setIsNotesOpen(false)}
        event={event}
      />
    </>
  );
};

export default EventCard;

